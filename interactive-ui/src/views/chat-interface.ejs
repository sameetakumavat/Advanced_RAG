<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Interface - Advanced RAG System</title>
    
    <!-- Import shared styles -->
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/chat-interface.css">
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <!-- Navigation Header -->
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-left">
                <a href="/dashboard" class="nav-brand">
                    <i class="fas fa-brain"></i>
                    Advanced RAG
                </a>
            </div>
            <div class="nav-right">
                <a href="/dashboard" class="nav-link">
                    <i class="fas fa-tachometer-alt"></i>
                    Dashboard
                </a>
                <a href="/file-management" class="nav-link">
                    <i class="fas fa-file-alt"></i>
                    Files
                </a>
                <a href="/query-interface" class="nav-link">
                    <i class="fas fa-search"></i>
                    Query
                </a>
                <a href="/chat-interface" class="nav-link active">
                    <i class="fas fa-comments"></i>
                    Chat
                </a>
                <button class="logout-btn" onclick="logout()">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </button>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="main-content">
        <div class="chat-container">
            <!-- Simple Header -->
            <div class="chat-header">
                <h1><i class="fas fa-comments"></i> Chat with Documents</h1>
                <div class="header-actions">
                    <div class="rag-status" id="ragStatus">
                        <i class="fas fa-circle"></i>
                        <span id="ragStatusText">Checking...</span>
                    </div>
                    <button class="clear-chat-btn" onclick="clearChatHistory()" title="Clear Chat">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>

            <!-- RAG Status Warning (shown if RAG not initialized) -->
            <div id="ragStatusWarning" class="status-alert warning" style="display: none;">
                <div class="alert-content">
                    <i class="fas fa-exclamation-triangle"></i>
                    <div>
                        <strong>Documents Not Initialized</strong>
                        <p>Please upload and initialize your documents in <a href="/file-management">File Management</a> first.</p>
                    </div>
                </div>
            </div>

            <!-- Simple Chat Area -->
            <div class="chat-area">
                <!-- Chat Messages Container -->
                <div class="chat-messages" id="chatMessages">
                    <!-- Empty state -->
                    <div class="empty-chat" id="emptyChat">
                        <div class="empty-chat-icon">ðŸ’¬</div>
                        <h3>Start chatting with your documents</h3>
                        <p>Ask questions and get AI-powered answers with citations.</p>
                    </div>
                </div>

                <!-- Simple Chat Input -->
                <div class="chat-input-area">
                    <form class="chat-input-form" id="chatForm" onsubmit="sendMessage(event)">
                        <div class="chat-input-wrapper">
                            <textarea 
                                id="chatInput" 
                                class="chat-input" 
                                placeholder="Ask a question about your documents..."
                                rows="1"
                                disabled
                            ></textarea>
                        </div>
                        <button type="submit" class="send-button" id="sendButton" disabled>
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </main>

    <!-- Chat Interface JavaScript -->
    <script>
        // Global variables
        let chatHistory = [];
        let isRagInitialized = false;
        let isTyping = false;

        // Initialize the chat interface when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeChatInterface();
            checkRagStatus();
            loadChatHistory();
        });

        /**
         * Initialize the chat interface
         */
        function initializeChatInterface() {
            console.log('ðŸš€ Initializing Chat Interface...');
            
            // Setup auto-resize for chat input
            const chatInput = document.getElementById('chatInput');
            chatInput.addEventListener('input', function() {
                autoResizeTextarea(this);
                toggleSendButton();
            });

            // Handle Enter key in chat input
            chatInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if (!this.disabled && this.value.trim()) {
                        sendMessage(e);
                    }
                }
            });
        }

        /**
         * Check RAG initialization status
         */
        async function checkRagStatus() {
            try {
                // Check localStorage for initialized files
                const ragStatus = localStorage.getItem('ragInitialized');
                const initializedFiles = JSON.parse(localStorage.getItem('initializedFiles') || '[]');
                
                isRagInitialized = ragStatus === 'true' && initializedFiles.length > 0;
                updateUIBasedOnRagStatus();
                
                console.log('RAG Status:', isRagInitialized ? 'Initialized' : 'Not Initialized');
            } catch (error) {
                console.error('Error checking RAG status:', error);
                isRagInitialized = false;
                updateUIBasedOnRagStatus();
            }
        }

        /**
         * Update UI based on RAG initialization status
         */
        function updateUIBasedOnRagStatus() {
            const chatInput = document.getElementById('chatInput');
            const sendButton = document.getElementById('sendButton');
            const ragWarning = document.getElementById('ragStatusWarning');
            const ragStatus = document.getElementById('ragStatus');
            const ragStatusText = document.getElementById('ragStatusText');
            
            if (isRagInitialized) {
                chatInput.disabled = false;
                chatInput.placeholder = "Ask a question about your documents...";
                ragWarning.style.display = 'none';
                ragStatus.className = 'rag-status active';
                ragStatusText.textContent = 'Documents Ready';
                toggleSendButton();
            } else {
                chatInput.disabled = true;
                chatInput.placeholder = "Please initialize documents first...";
                sendButton.disabled = true;
                ragWarning.style.display = 'block';
                ragStatus.className = 'rag-status inactive';
                ragStatusText.textContent = 'No Documents';
            }
        }

        /**
         * Toggle send button state based on input
         */
        function toggleSendButton() {
            const chatInput = document.getElementById('chatInput');
            const sendButton = document.getElementById('sendButton');
            const hasText = chatInput.value.trim().length > 0;
            
            sendButton.disabled = !hasText || chatInput.disabled || isTyping;
        }

        /**
         * Auto-resize textarea based on content
         */
        function autoResizeTextarea(textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
        }

        /**
         * Send a message
         */
        async function sendMessage(event) {
            event.preventDefault();
            
            if (!isRagInitialized || isTyping) {
                return;
            }

            const chatInput = document.getElementById('chatInput');
            const message = chatInput.value.trim();
            
            if (!message) {
                return;
            }

            // Clear input and resize
            chatInput.value = '';
            autoResizeTextarea(chatInput);
            toggleSendButton();

            // Hide empty state
            document.getElementById('emptyChat').style.display = 'none';

            // Add user message to chat
            addMessageToChat('user', message);

            // Show typing indicator
            showTypingIndicator();

            try {
                // Simulate API call
                const response = await simulateChatResponse(message);
                
                // Hide typing indicator
                hideTypingIndicator();
                
                // Add assistant response
                addMessageToChat('assistant', response.message, response.citations);
                
                // Save to chat history
                saveChatHistory();
                
            } catch (error) {
                console.error('Error sending message:', error);
                hideTypingIndicator();
                addMessageToChat('assistant', 'Sorry, I encountered an error. Please try again.');
            }
        }

        /**
         * Add a message to the chat interface
         */
        function addMessageToChat(role, message, citations = []) {
            const chatMessages = document.getElementById('chatMessages');
            const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            const messageElement = document.createElement('div');
            messageElement.className = `message ${role}`;
            
            let citationsHtml = '';
            if (citations && citations.length > 0) {
                citationsHtml = `
                    <div class="message-citations">
                        ${citations.map((citation, index) => `
                            <span class="citation">[${index + 1}] ${citation.source}</span>
                        `).join('')}
                    </div>
                `;
            }
            
            messageElement.innerHTML = `
                <div class="message-content">
                    <div class="message-text">${message}</div>
                    ${citationsHtml}
                    <div class="message-time">${timestamp}</div>
                </div>
            `;
            
            chatMessages.appendChild(messageElement);
            
            // Add to chat history
            chatHistory.push({
                role: role,
                message: message,
                citations: citations,
                timestamp: new Date().toISOString()
            });
            
            // Limit chat history to last 20 pairs (40 messages)
            if (chatHistory.length > 40) {
                chatHistory = chatHistory.slice(-40);
            }
            
            // Scroll to bottom
            scrollToBottom();
        }

        /**
         * Show typing indicator
         */
        function showTypingIndicator() {
            isTyping = true;
            toggleSendButton();
            
            const chatMessages = document.getElementById('chatMessages');
            const typingElement = document.createElement('div');
            typingElement.className = 'message assistant typing';
            typingElement.id = 'typingIndicator';
            
            typingElement.innerHTML = `
                <div class="message-content">
                    <div class="typing-dots">
                        <span></span><span></span><span></span>
                    </div>
                </div>
            `;
            
            chatMessages.appendChild(typingElement);
            scrollToBottom();
        }

        /**
         * Hide typing indicator
         */
        function hideTypingIndicator() {
            isTyping = false;
            toggleSendButton();
            
            const typingIndicator = document.getElementById('typingIndicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }

        /**
         * Scroll chat to bottom
         */
        function scrollToBottom() {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        /**
         * Simulate chat response (replace with actual API call)
         */
        async function simulateChatResponse(message) {
            // Simulate API delay
            await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));
            
            // Simple mock responses
            let response = {
                message: '',
                citations: []
            };
            
            if (message.toLowerCase().includes('summary')) {
                response.message = `Based on your documents, here's a summary: The key points include important findings and analysis. The content provides valuable insights for understanding the topic.`;
                response.citations = [
                    { source: 'Document_1.pdf' },
                    { source: 'Document_2.pdf' }
                ];
            } else if (message.toLowerCase().includes('finding') || message.toLowerCase().includes('conclusion')) {
                response.message = `The main findings are: 1) Significant improvements were observed, 2) The methodology proved effective, 3) Results support the hypothesis.`;
                response.citations = [
                    { source: 'Research_Results.pdf' }
                ];
            } else {
                response.message = `Based on your question about "${message}", I found relevant information in your documents. The content addresses this topic with detailed explanations and supporting evidence.`;
                response.citations = [
                    { source: 'Main_Document.pdf' }
                ];
            }
            
            return response;
        }

        /**
         * Clear chat history
         */
        function clearChatHistory() {
            if (confirm('Clear all chat messages?')) {
                chatHistory = [];
                const chatMessages = document.getElementById('chatMessages');
                
                // Remove all messages except empty state
                const messages = chatMessages.querySelectorAll('.message');
                messages.forEach(message => message.remove());
                
                // Show empty state
                document.getElementById('emptyChat').style.display = 'block';
                
                // Save empty history
                saveChatHistory();
            }
        }

        /**
         * Save and load chat history
         */
        function saveChatHistory() {
            try {
                localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
            } catch (error) {
                console.error('Error saving chat history:', error);
            }
        }

        function loadChatHistory() {
            try {
                const savedHistory = localStorage.getItem('chatHistory');
                if (savedHistory) {
                    chatHistory = JSON.parse(savedHistory);
                    
                    if (chatHistory.length > 0) {
                        document.getElementById('emptyChat').style.display = 'none';
                        
                        chatHistory.forEach(entry => {
                            addMessageToUI(entry);
                        });
                    }
                }
            } catch (error) {
                console.error('Error loading chat history:', error);
                chatHistory = [];
            }
        }

        function addMessageToUI(entry) {
            const chatMessages = document.getElementById('chatMessages');
            const timestamp = new Date(entry.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            const messageElement = document.createElement('div');
            messageElement.className = `message ${entry.role}`;
            
            let citationsHtml = '';
            if (entry.citations && entry.citations.length > 0) {
                citationsHtml = `
                    <div class="message-citations">
                        ${entry.citations.map((citation, index) => `
                            <span class="citation">[${index + 1}] ${citation.source}</span>
                        `).join('')}
                    </div>
                `;
            }
            
            messageElement.innerHTML = `
                <div class="message-content">
                    <div class="message-text">${entry.message}</div>
                    ${citationsHtml}
                    <div class="message-time">${timestamp}</div>
                </div>
            `;
            
            chatMessages.appendChild(messageElement);
        }

        /**
         * Logout functionality
         */
        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                localStorage.removeItem('user');
                localStorage.removeItem('authToken');
                window.location.href = '/login';
            }
        }
    </script>

    <!-- Simple CSS for clean chat interface -->
    <style>
        .chat-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 1rem;
            height: calc(100vh - 120px);
            display: flex;
            flex-direction: column;
        }

        .chat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 1rem;
        }

        .chat-header h1 {
            margin: 0;
            color: var(--text-color);
            font-size: 1.5rem;
        }

        .header-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .rag-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            border: 1px solid var(--border-color);
        }

        .rag-status.active {
            color: var(--success-color);
            border-color: var(--success-color);
            background: rgba(46, 160, 67, 0.1);
        }

        .rag-status.inactive {
            color: var(--warning-color);
            border-color: var(--warning-color);
            background: rgba(255, 193, 7, 0.1);
        }

        .rag-status i {
            font-size: 0.8rem;
        }

        .clear-chat-btn {
            background: var(--warning-color);
            color: white;
            border: none;
            padding: 0.5rem;
            border-radius: 50%;
            cursor: pointer;
            width: 2.5rem;
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .clear-chat-btn:hover {
            background: #e0a800;
        }

        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            border: 1px solid var(--border-color);
            overflow: hidden;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .empty-chat {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            color: var(--text-secondary);
        }

        .empty-chat-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .message {
            display: flex;
            flex-direction: column;
            max-width: 70%;
        }

        .message.user {
            align-self: flex-end;
        }

        .message.assistant {
            align-self: flex-start;
        }

        .message-content {
            background: var(--bg-color);
            padding: 1rem;
            border-radius: 1rem;
            border: 1px solid var(--border-color);
        }

        .message.user .message-content {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .message-text {
            margin: 0;
            line-height: 1.5;
            white-space: pre-wrap;
        }

        .message-citations {
            margin-top: 0.5rem;
            padding-top: 0.5rem;
            border-top: 1px solid rgba(255,255,255,0.2);
            font-size: 0.85rem;
        }

        .message.assistant .message-citations {
            border-top-color: var(--border-color);
        }

        .citation {
            display: inline-block;
            margin-right: 0.5rem;
            padding: 0.2rem 0.5rem;
            background: rgba(0,0,0,0.1);
            border-radius: 12px;
            font-size: 0.75rem;
        }

        .message.user .citation {
            background: rgba(255,255,255,0.2);
        }

        .message-time {
            font-size: 0.75rem;
            opacity: 0.7;
            margin-top: 0.5rem;
            text-align: right;
        }

        .message.assistant .message-time {
            text-align: left;
        }

        .typing {
            opacity: 0.7;
        }

        .typing-dots {
            display: flex;
            gap: 4px;
            align-items: center;
        }

        .typing-dots span {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: var(--text-secondary);
            animation: typing 1.4s infinite ease-in-out;
        }

        .typing-dots span:nth-child(1) { animation-delay: 0s; }
        .typing-dots span:nth-child(2) { animation-delay: 0.2s; }
        .typing-dots span:nth-child(3) { animation-delay: 0.4s; }

        @keyframes typing {
            0%, 60%, 100% { transform: scale(1); opacity: 0.5; }
            30% { transform: scale(1.2); opacity: 1; }
        }

        .chat-input-area {
            padding: 1rem;
            border-top: 1px solid var(--border-color);
        }

        .chat-input-form {
            display: flex;
            gap: 1rem;
            align-items: flex-end;
        }

        .chat-input-wrapper {
            flex: 1;
        }

        .chat-input {
            width: 100%;
            min-height: 40px;
            max-height: 120px;
            padding: 0.75rem 1rem;
            border: 2px solid var(--border-color);
            border-radius: 20px;
            font-family: inherit;
            font-size: 1rem;
            resize: none;
            background: var(--bg-color);
            color: var(--text-color);
        }

        .chat-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }

        .chat-input:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .send-button {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 0.75rem;
            border-radius: 50%;
            cursor: pointer;
            width: 3rem;
            height: 3rem;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.3s ease;
        }

        .send-button:hover:not(:disabled) {
            background: #5a6fb8;
        }

        .send-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        /* Mobile responsive */
        @media (max-width: 768px) {
            .chat-container {
                padding: 0.5rem;
                height: calc(100vh - 100px);
            }
            
            .chat-header {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }
            
            .message {
                max-width: 85%;
            }
        }
    </style>
</body>
</html>
